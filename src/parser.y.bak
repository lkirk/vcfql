%{
#include <float.h>
#include <math.h>
#include <stdbool.h>
#include <stdio.h>
 
    int begs[26];
    int base;
    extern void yyerror();
    extern int yylex();

%}
 
%start list
 
%token DIGIT LETTER EQ NEQ OR PIPE LESSEQ GREATEREQ LESS GREATER

%right '|'
%left ','
%left OR
%left AND
%nonassoc NEQ EQ '<' '>' LESSEQ GREATEREQ
%left '+' '-'
%left '*' '/' '%'
%left UMINUS 
 
%%
 
list: /*empty */
| list stat'\n'
| list error'\n'
{
    yyerrok;
}
;

stat:
expr { fprintf(stdout, "%d\n", $1); }
| LETTER '=' expr { begs[$1] = $3; }
;

expr:
  '(' expr ')'          { $$ = $2;       }
| '-' expr %prec UMINUS { $$ = -$2;      }
| LETTER                { $$ = begs[$1]; }
| number
| expr '*' expr         { $$ = $1 * $3;  }
| expr '/' expr         { $$ = $1 / $3;  }
| expr '%' expr         { $$ = $1 % $3;  }
| expr '+' expr         { $$ = $1 + $3;  }
| expr '-' expr         { $$ = $1 - $3;  }
| expr AND expr         { $$ = $1 && $3; }
| expr OR expr          { $$ = $1 || $3; }
| expr EQ  expr         { $$ = $1 == $3; }
| expr NEQ expr         { $$ = $1 != $3; }
| expr GREATEREQ expr   { $$ = float_compare(GREATEREQ, $1, $3); }
;

number:
DIGIT {
    $$ = $1;
    base = ($1==0) ? 8:10;
}
| number DIGIT { $$ = base * $1 + $2; }
;

%%
/* int main() */
/* { */
/*     return(yyparse()); */
/* } */

int
__fcmp(const double x1, const double x2)
{
  int exponent;
  double delta, difference;

  /* Find exponent of largest absolute value */
  {
    double max = (fabs (x1) > fabs (x2)) ? x1 : x2;

    frexp (max, &exponent);
  }

  /* Form a neighborhood of size  2 * delta */
  delta = ldexp (FLT_EPSILON, exponent);

  difference = x1 - x2;

  if (difference > delta)       /* x1 > x2 */
    {
      return 1;
    }
  else if (difference < -delta) /* x1 < x2 */
    {
      return -1;
    }
  else                          /* -delta <= difference <= delta */
    {
      return 0;                 /* x1 ~=~ x2 */
    }
}

bool
float_compare(int opcode, const double a, const double b)
{
  int fcmp_result = __fcmp(a, b);
  switch(opcode) {
  case GREATEREQ:
    if (fcmp_result == -1)
      return false;
    return true;
    break;
  case LESSEQ:
    if (fcmp_result == 1)
      return false;
    return true;
    break;
  case GREATER:
    if (fcmp_result == 1)
      return true;
    return false;
    break;
  case LESS:
    if (fcmp_result == -1)
      return true;
    return false;
    break;
  }
  return false;
}
